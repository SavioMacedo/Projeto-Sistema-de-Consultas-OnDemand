// <auto-generated />
using Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Data.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20180614014014_Versao-1.1")]
    partial class Versao11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dominio.Entidades.TipoBancoDados", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString");

                    b.Property<string>("DESCRICAO");

                    b.HasKey("ID");

                    b.ToTable("TipoBancoDados");
                });

            modelBuilder.Entity("Entidade.Assoc_usua_consu", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<long>("ConsultaID")
                        .HasColumnName("ConsultaID");

                    b.Property<DateTime>("DT_CRIACAO")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_CRIACAO");

                    b.Property<long>("Tipo_AssociacaoID")
                        .HasColumnName("Tipo_AssociacaoID");

                    b.Property<string>("UsuarioID")
                        .HasColumnName("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("ConsultaID");

                    b.HasIndex("Tipo_AssociacaoID");

                    b.ToTable("Assoc_usua_consus");
                });

            modelBuilder.Entity("Entidade.Atualiza", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<long>("ConsultaID")
                        .HasColumnName("ConsultaID");

                    b.Property<string>("DESCRICAO")
                        .IsRequired()
                        .HasColumnName("DESCRICAO");

                    b.Property<DateTime>("DT_ATUALIZACAO")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_ATUALIZACAO");

                    b.Property<string>("UsuarioID")
                        .HasColumnName("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("ConsultaID");

                    b.ToTable("Atualizas");
                });

            modelBuilder.Entity("Entidade.Consulta", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("DESCRICAO")
                        .IsRequired()
                        .HasColumnName("DESCRICAO");

                    b.Property<DateTime>("DT_CRIACAO")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_CRIACAO");

                    b.Property<string>("IC_ATIVO")
                        .IsRequired()
                        .HasColumnName("IC_ATIVO");

                    b.Property<string>("NOME")
                        .IsRequired()
                        .HasColumnName("NOME");

                    b.Property<long>("TipoBancoDadosID");

                    b.HasKey("ID");

                    b.HasIndex("TipoBancoDadosID");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Entidade.PARAMETRO_CONSULTA", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("DESCRICAO")
                        .IsRequired()
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("NOME")
                        .IsRequired()
                        .HasColumnName("NOME");

                    b.Property<long>("Tipo_ParametroID")
                        .HasColumnName("Tipo_ParametroID");

                    b.Property<long>("VersaoID")
                        .HasColumnName("VersaoID");

                    b.HasKey("ID");

                    b.HasIndex("Tipo_ParametroID");

                    b.HasIndex("VersaoID");

                    b.ToTable("PARAMETRO_CONSULTAs");
                });

            modelBuilder.Entity("Entidade.SQL_LINHA", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("NU_LINHA")
                        .IsRequired()
                        .HasColumnName("NU_LINHA");

                    b.Property<string>("SQL")
                        .IsRequired()
                        .HasColumnName("SQL");

                    b.Property<long>("VersaoID")
                        .HasColumnName("VersaoID");

                    b.HasKey("ID");

                    b.HasIndex("VersaoID");

                    b.ToTable("SQL_LINHAs");
                });

            modelBuilder.Entity("Entidade.Tipo_Associacao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("TP_ASSOC")
                        .IsRequired()
                        .HasColumnName("TP_ASSOC");

                    b.HasKey("ID");

                    b.ToTable("Tipo_Associacaos");
                });

            modelBuilder.Entity("Entidade.Tipo_Parametro", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("NM_LABEL")
                        .IsRequired()
                        .HasColumnName("NM_LABEL");

                    b.Property<string>("NOME")
                        .IsRequired()
                        .HasColumnName("NOME");

                    b.HasKey("ID");

                    b.ToTable("Tipo_Parametros");
                });

            modelBuilder.Entity("Entidade.Versao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<long>("ConsultaID")
                        .HasColumnName("ConsultaID");

                    b.Property<string>("DESCRICAO")
                        .IsRequired()
                        .HasColumnName("DESCRICAO");

                    b.Property<DateTime>("DT_CRIACAO")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DT_CRIACAO");

                    b.Property<string>("IC_ATIVO")
                        .IsRequired()
                        .HasColumnName("IC_ATIVO");

                    b.Property<short>("NU_VERSAO")
                        .HasColumnName("NU_VERSAO");

                    b.HasKey("ID");

                    b.HasIndex("ConsultaID");

                    b.ToTable("Versaos");
                });

            modelBuilder.Entity("Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Entidade.Assoc_usua_consu", b =>
                {
                    b.HasOne("Entidade.Consulta", "Consulta")
                        .WithMany("Assoc_usua_consus")
                        .HasForeignKey("ConsultaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidade.Tipo_Associacao", "Tipo_Associacao")
                        .WithMany("Assoc_usua_consus")
                        .HasForeignKey("Tipo_AssociacaoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidade.Atualiza", b =>
                {
                    b.HasOne("Entidade.Consulta", "AtualizaConsulta")
                        .WithMany("Atualizas")
                        .HasForeignKey("ConsultaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidade.Consulta", b =>
                {
                    b.HasOne("Dominio.Entidades.TipoBancoDados", "TipoBancoDados")
                        .WithMany("Consultas")
                        .HasForeignKey("TipoBancoDadosID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidade.PARAMETRO_CONSULTA", b =>
                {
                    b.HasOne("Entidade.Tipo_Parametro", "Tipo_Parametro")
                        .WithMany("PARAMETRO_CONSULTAs")
                        .HasForeignKey("Tipo_ParametroID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidade.Versao", "Versao")
                        .WithMany("PARAMETRO_CONSULTAs")
                        .HasForeignKey("VersaoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidade.SQL_LINHA", b =>
                {
                    b.HasOne("Entidade.Versao", "Versao")
                        .WithMany("SQL_LINHAs")
                        .HasForeignKey("VersaoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidade.Versao", b =>
                {
                    b.HasOne("Entidade.Consulta", "Consulta")
                        .WithMany("Versaos")
                        .HasForeignKey("ConsultaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
